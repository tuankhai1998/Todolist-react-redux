{"ast":null,"code":"import * as types from '../constants/Actiontype';\nvar data = JSON.parse(localStorage.getItem('todoItems'));\nvar initialState = data ? data : [];\n\nvar randomstring = require(\"randomstring\");\n\nvar randomID = () => {\n  return randomstring.generate(7) + '-' + randomstring.generate(9) + '-' + randomstring.generate(12);\n};\n\nvar onCreatNewToDo = inputVal => {\n  // console.log(inputVal);\n  var newToDo = {\n    id: randomID(),\n    content: inputVal,\n    isComplete: false\n  };\n  return newToDo;\n};\n\nvar myReducer = (state = initialState, action) => {\n  let index = action.index;\n  let content = action.content;\n  let todoList;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.HAND_STATUS:\n      state[index].isComplete = !state[index].isComplete;\n      todoList = JSON.stringify(state);\n      localStorage.setItem('todoItems', todoList);\n      return [...state];\n\n    case types.DELETE_ITEM:\n      state.splice(index, 1);\n      todoList = JSON.stringify(state);\n      localStorage.setItem('todoItems', todoList);\n      return [...state];\n\n    case types.ADD_ITEM:\n      let newTodo = onCreatNewToDo(content);\n      state.push(newTodo);\n      todoList = JSON.stringify(state);\n      localStorage.setItem('todoItems', todoList);\n      return [...state];\n\n    case type.ON_FILTER:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/tuankhai/Desktop/project/react/redux-TodoList/src/reducers/allItem.js"],"names":["types","data","JSON","parse","localStorage","getItem","initialState","randomstring","require","randomID","generate","onCreatNewToDo","inputVal","newToDo","id","content","isComplete","myReducer","state","action","index","todoList","type","LIST_ALL","HAND_STATUS","stringify","setItem","DELETE_ITEM","splice","ADD_ITEM","newTodo","push","ON_FILTER"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,yBAAvB;AAEA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAX;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC;;AAEA,IAAIM,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AAEA,IAAIC,QAAQ,GAAG,MAAM;AACjB,SAAOF,YAAY,CAACG,QAAb,CAAsB,CAAtB,IAA2B,GAA3B,GAAiCH,YAAY,CAACG,QAAb,CAAsB,CAAtB,CAAjC,GAA4D,GAA5D,GAAkEH,YAAY,CAACG,QAAb,CAAsB,EAAtB,CAAzE;AACH,CAFD;;AAIA,IAAIC,cAAc,GAAIC,QAAD,IAAc;AAC/B;AACA,MAAIC,OAAO,GAAG;AACVC,IAAAA,EAAE,EAAEL,QAAQ,EADF;AAEVM,IAAAA,OAAO,EAAEH,QAFC;AAGVI,IAAAA,UAAU,EAAE;AAHF,GAAd;AAKA,SAAOH,OAAP;AACH,CARD;;AAUA,IAAII,SAAS,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAC9C,MAAIC,KAAK,GAAGD,MAAM,CAACC,KAAnB;AACA,MAAIL,OAAO,GAAGI,MAAM,CAACJ,OAArB;AACA,MAAIM,QAAJ;;AACA,UAAQF,MAAM,CAACG,IAAf;AACI,SAAKtB,KAAK,CAACuB,QAAX;AACI,aAAOL,KAAP;;AACJ,SAAKlB,KAAK,CAACwB,WAAX;AACIN,MAAAA,KAAK,CAACE,KAAD,CAAL,CAAaJ,UAAb,GAA0B,CAACE,KAAK,CAACE,KAAD,CAAL,CAAaJ,UAAxC;AACAK,MAAAA,QAAQ,GAAGnB,IAAI,CAACuB,SAAL,CAAeP,KAAf,CAAX;AACAd,MAAAA,YAAY,CAACsB,OAAb,CAAqB,WAArB,EAAkCL,QAAlC;AACA,aAAO,CAAC,GAAGH,KAAJ,CAAP;;AACJ,SAAKlB,KAAK,CAAC2B,WAAX;AACIT,MAAAA,KAAK,CAACU,MAAN,CAAaR,KAAb,EAAoB,CAApB;AACAC,MAAAA,QAAQ,GAAGnB,IAAI,CAACuB,SAAL,CAAeP,KAAf,CAAX;AACAd,MAAAA,YAAY,CAACsB,OAAb,CAAqB,WAArB,EAAkCL,QAAlC;AACA,aAAO,CAAC,GAAGH,KAAJ,CAAP;;AACJ,SAAKlB,KAAK,CAAC6B,QAAX;AACI,UAAIC,OAAO,GAAGnB,cAAc,CAACI,OAAD,CAA5B;AACAG,MAAAA,KAAK,CAACa,IAAN,CAAWD,OAAX;AACAT,MAAAA,QAAQ,GAAGnB,IAAI,CAACuB,SAAL,CAAeP,KAAf,CAAX;AACAd,MAAAA,YAAY,CAACsB,OAAb,CAAqB,WAArB,EAAkCL,QAAlC;AACA,aAAO,CAAC,GAAGH,KAAJ,CAAP;;AACJ,SAAKI,IAAI,CAACU,SAAV;AACI,aAAO,EAAP;;AAEJ;AAAS,aAAOd,KAAP;AAtBb;AAyBH,CA7BD;;AA+BA,eAAeD,SAAf","sourcesContent":["import * as types from '../constants/Actiontype';\n\nvar data = JSON.parse(localStorage.getItem('todoItems'));\nvar initialState = data ? data : [];\n\nvar randomstring = require(\"randomstring\");\n\nvar randomID = () => {\n    return randomstring.generate(7) + '-' + randomstring.generate(9) + '-' + randomstring.generate(12);\n}\n\nvar onCreatNewToDo = (inputVal) => {\n    // console.log(inputVal);\n    var newToDo = {\n        id: randomID(),\n        content: inputVal,\n        isComplete: false\n    }\n    return newToDo;\n}\n\nvar myReducer = (state = initialState, action) => {\n    let index = action.index;\n    let content = action.content;\n    let todoList;\n    switch (action.type) {\n        case types.LIST_ALL:\n            return state;\n        case types.HAND_STATUS:\n            state[index].isComplete = !state[index].isComplete;\n            todoList = JSON.stringify(state);\n            localStorage.setItem('todoItems', todoList);\n            return [...state];\n        case types.DELETE_ITEM:\n            state.splice(index, 1);\n            todoList = JSON.stringify(state);\n            localStorage.setItem('todoItems', todoList);\n            return [...state];\n        case types.ADD_ITEM:\n            let newTodo = onCreatNewToDo(content);\n            state.push(newTodo);\n            todoList = JSON.stringify(state);\n            localStorage.setItem('todoItems', todoList);\n            return [...state];\n        case type.ON_FILTER:\n            return []\n            \n        default: return state;\n    }\n\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}