{"ast":null,"code":"var _jsxFileName = \"/home/tuankhai/Desktop/project/react/redux-TodoList/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport TodoHeader from './components/todoheader';\nimport TodoBody from './components/todobody';\nimport TodoFooder from './components/todofooder';\n\nvar randomstring = require(\"randomstring\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.randomID = () => {\n      return randomstring.generate(7) + '-' + randomstring.generate(9) + '-' + randomstring.generate(12);\n    };\n\n    this.onCreatNewToDo = inputVal => {\n      // console.log(inputVal);\n      var newToDo = {\n        id: this.randomID(),\n        content: inputVal,\n        isComplete: false\n      };\n      return newToDo;\n    };\n\n    this.onPushToDoList = dataToDo => {\n      let todoItem = this.state.todoItem;\n      this.setState({\n        todoItem: [...todoItem, this.onCreatNewToDo(dataToDo)]\n      });\n      let todoList = JSON.stringify(todoItem);\n      this.updateLocalStorage(todoList);\n    };\n\n    this.removeItem = index => {\n      console.log(index);\n      let todoItem = this.state.todoItem;\n      this.setState({\n        todoItem: [...todoItem.slice(0, index), ...todoItem.splice(index - 1, 0), ...todoItem.slice(index + 1)]\n      });\n      let todoList = JSON.stringify(todoItem);\n      this.updateLocalStorage(todoList);\n    };\n\n    this.updateLocalStorage = todoList => {\n      localStorage.setItem('todoItems', todoList);\n    };\n\n    this.onFilterChange = value => {\n      this.setState({\n        filter: value\n      });\n    };\n\n    this.onFilter = (todoItems, filter) => {\n      if (filter === 1) {\n        return todoItems.filter(todoItem => {\n          return todoItem.isComplete === true;\n        });\n      }\n\n      if (filter === -1) {\n        return todoItems.filter(todoItem => {\n          return todoItem.isComplete === false;\n        });\n      } else {\n        return todoItems;\n      }\n    };\n\n    this.onData = () => {\n      if (localStorage.getItem('todoItems')) {\n        return JSON.parse(localStorage.getItem('todoItems'));\n      } else {\n        return [];\n      }\n    };\n\n    this.state = {\n      todoItem: this.onData(),\n      filter: 0\n    };\n  }\n\n  render() {\n    const filter = this.state.filter;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"todos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(TodoHeader // inputVal = { this.onCreatNewToDo }\n    , {\n      addItem: this.onPushToDoList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(TodoBody // data={this.onFilter(todoItem,filter)}\n    // onUpdateStatus={this.onUpdateStatus}\n    // removeItem={this.removeItem}\n    , {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(TodoFooder, {\n      filter: filter,\n      onFilterChange: this.onFilterChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = (despatch, props) => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/tuankhai/Desktop/project/react/redux-TodoList/src/App.js"],"names":["React","Component","connect","TodoHeader","TodoBody","TodoFooder","randomstring","require","App","constructor","props","randomID","generate","onCreatNewToDo","inputVal","newToDo","id","content","isComplete","onPushToDoList","dataToDo","todoItem","state","setState","todoList","JSON","stringify","updateLocalStorage","removeItem","index","console","log","slice","splice","localStorage","setItem","onFilterChange","value","filter","onFilter","todoItems","onData","getItem","parse","render","mapStateToProps","mapDispatchToProps","despatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\n\nimport TodoHeader from './components/todoheader';\nimport TodoBody from './components/todobody';\nimport TodoFooder from './components/todofooder';\n\n\nvar randomstring = require(\"randomstring\");\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoItem: this.onData(),\n      filter : 0\n    }\n  }\n\n  randomID = () => {\n    return randomstring.generate(7) + '-' + randomstring.generate(9) + '-' + randomstring.generate(12);\n  }\n\n  onCreatNewToDo = (inputVal) => {\n    // console.log(inputVal);\n    var newToDo = {\n      id: this.randomID(),\n      content: inputVal,\n      isComplete: false\n    }\n    return newToDo;\n  }\n\n  onPushToDoList = (dataToDo) => {\n    let { todoItem } = this.state;\n    this.setState({\n      todoItem: [\n        ...todoItem,\n        this.onCreatNewToDo(dataToDo)\n      ]\n    });\n    let todoList = JSON.stringify(todoItem);\n    this.updateLocalStorage(todoList);\n  }\n\n  // onUpdateStatus = (index) => {\n  //   console.log(index);\n  //   let { todoItem } = this.state;\n  //   todoItem[index].isComplete = !todoItem[index].isComplete;\n  //   this.setState({\n  //     todoItem: todoItem,\n  //   });\n  //   let todoList = JSON.stringify(todoItem);\n  //   this.updateLocalStorage(todoList);\n  // }\n\n  removeItem = (index) => {\n    console.log(index);\n    let { todoItem } = this.state;\n    this.setState({\n      todoItem:[\n        ...todoItem.slice(0,index),\n        ...todoItem.splice(index-1,0),\n        ...todoItem.slice(index+1)\n      ]\n    });\n    let todoList = JSON.stringify(todoItem);\n    this.updateLocalStorage(todoList);\n\n  }\n\n  updateLocalStorage = (todoList) => {\n    localStorage.setItem('todoItems', todoList);\n  }\n\n  onFilterChange = (value) => {\n    this.setState({\n      filter : value\n    });\n  }\n\n  onFilter = (todoItems,filter) => {\n    if(filter === 1){\n      return todoItems.filter((todoItem) => {\n        return todoItem.isComplete === true;\n      })\n    }\n    if(filter === -1){\n      return todoItems.filter((todoItem) => {\n        return todoItem.isComplete === false;\n      })\n    }\n    else{\n      return todoItems;\n    }\n\n  }\n\n  onData = () => {\n    if(localStorage.getItem('todoItems')){\n      return JSON.parse(localStorage.getItem('todoItems'));\n    }else {\n      return [];\n    }\n  }\n\n  render() {\n    const {  filter } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"todos\">\n          <TodoHeader\n            // inputVal = { this.onCreatNewToDo }\n            addItem={this.onPushToDoList}\n          />\n          <TodoBody\n            // data={this.onFilter(todoItem,filter)}\n            // onUpdateStatus={this.onUpdateStatus}\n            // removeItem={this.removeItem}\n          />\n          <TodoFooder \n            filter= {filter}\n            onFilterChange = { this.onFilterChange }\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n}\n\nconst mapDispatchToProps = (despatch, props) => {\n  return {};\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}