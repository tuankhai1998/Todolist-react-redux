{"ast":null,"code":"var _jsxFileName = \"/home/tuankhai/Desktop/project/react/reactproject2/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TodoHeader from './components/todoheader';\nimport TodoBody from './components/todobody';\nimport TodoFooder from './components/todofooder';\n\nvar randomstring = require(\"randomstring\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.randomID = () => {\n      return randomstring.generate(7) + '-' + randomstring.generate(9) + '-' + randomstring.generate(12);\n    };\n\n    this.onCreatNewToDo = inputVal => {\n      // console.log(inputVal);\n      var newToDo = {\n        id: this.randomID(),\n        content: inputVal,\n        isComplete: false\n      };\n      return newToDo;\n    };\n\n    this.onPushToDoList = dataToDo => {\n      let todoItem = this.state.todoItem;\n      this.setState({\n        todoItem: [...this.state.todoItem, this.onCreatNewToDo(dataToDo)]\n      });\n      this.updateLocalStorage(this.state.todoItem);\n    };\n\n    this.onUpdateStatus = index => {\n      console.log(index);\n      let todoItem = this.state.todoItem;\n      todoItem[index].isComplete = !todoItem[index].isComplete;\n      this.setState({\n        todoItem: todoItem\n      });\n      this.updateLocalStorage(this.state.todoItem);\n    };\n\n    this.removeItem = index => {\n      console.log(index);\n      let todoItem = this.state.todoItem;\n      this.setState({\n        todoItem: [...todoItem.slice(0, index), ...todoItem.splice(index - 1, 0), ...todoItem.slice(index + 1)]\n      });\n      this.updateLocalStorage(this.state.todoItem);\n    };\n\n    this.updateLocalStorage = todoList => {\n      let todoItem = JSON.stringify(todoList);\n      localStorage.setItem('todoItems', todoItem);\n    };\n\n    this.onFilterChange = value => {\n      this.setState({\n        filter: value\n      });\n    };\n\n    this.onFilter = (todoItems, filter) => {\n      if (filter === 1) {\n        return todoItems.filter(todoItem => {\n          return todoItem.isComplete === true;\n        });\n      }\n\n      if (filter === -1) {\n        return todoItems.filter(todoItem => {\n          return todoItem.isComplete === false;\n        });\n      } else {\n        return todoItems;\n      }\n    };\n\n    this.state = {\n      todoItem: [],\n      filter: 0\n    };\n  }\n\n  componentWillMount() {\n    let itemList = localStorage.getItem('todoItems');\n\n    if (localStorage && itemList) {\n      JSON.parse(itemList);\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          todoItem = _this$state.todoItem,\n          filter = _this$state.filter;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"todos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(TodoHeader // inputVal = { this.onCreatNewToDo }\n    , {\n      addItem: this.onPushToDoList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(TodoBody, {\n      data: this.onFilter(todoItem, filter),\n      onUpdateStatus: this.onUpdateStatus,\n      removeItem: this.removeItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(TodoFooder, {\n      filter: filter,\n      onFilterChange: this.onFilterChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/tuankhai/Desktop/project/react/reactproject2/src/App.js"],"names":["React","Component","TodoHeader","TodoBody","TodoFooder","randomstring","require","App","constructor","props","randomID","generate","onCreatNewToDo","inputVal","newToDo","id","content","isComplete","onPushToDoList","dataToDo","todoItem","state","setState","updateLocalStorage","onUpdateStatus","index","console","log","removeItem","slice","splice","todoList","JSON","stringify","localStorage","setItem","onFilterChange","value","filter","onFilter","todoItems","componentWillMount","itemList","getItem","parse","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport TodoHeader from './components/todoheader';\nimport TodoBody from './components/todobody';\nimport TodoFooder from './components/todofooder';\n\nvar randomstring = require(\"randomstring\");\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoItem: [\n\n      ],\n      filter : 0\n    }\n  }\n\n  componentWillMount() {\n\n    let itemList = localStorage.getItem('todoItems');\n    if(localStorage && itemList)\n    {\n        JSON.parse(itemList);\n    }\n  }\n\n  randomID = () => {\n    return randomstring.generate(7) + '-' + randomstring.generate(9) + '-' + randomstring.generate(12);\n  }\n\n  onCreatNewToDo = (inputVal) => {\n    // console.log(inputVal);\n    var newToDo = {\n      id: this.randomID(),\n      content: inputVal,\n      isComplete: false\n    }\n    return newToDo;\n  }\n\n  onPushToDoList = (dataToDo) => {\n    let { todoItem } = this.state;\n    this.setState({\n      todoItem: [\n        ...this.state.todoItem,\n        this.onCreatNewToDo(dataToDo)\n      ]\n    });\n    this.updateLocalStorage(this.state.todoItem);\n  }\n\n  onUpdateStatus = (index) => {\n    console.log(index);\n    let { todoItem } = this.state;\n    todoItem[index].isComplete = !todoItem[index].isComplete;\n    this.setState({\n      todoItem: todoItem,\n    });\n    this.updateLocalStorage(this.state.todoItem);\n\n  }\n\n  removeItem = (index) => {\n    console.log(index);\n    let { todoItem } = this.state;\n    this.setState({\n      todoItem:[\n        ...todoItem.slice(0,index),\n        ...todoItem.splice(index-1,0),\n        ...todoItem.slice(index+1)\n      ]\n    });\n    this.updateLocalStorage(this.state.todoItem);\n\n  }\n\n  updateLocalStorage = (todoList) => {\n    let todoItem = JSON.stringify(todoList);\n    localStorage.setItem('todoItems', todoItem);\n  }\n\n  onFilterChange = (value) => {\n    this.setState({\n      filter : value\n    });\n  }\n\n  onFilter = (todoItems,filter) => {\n    if(filter === 1){\n      return todoItems.filter((todoItem) => {\n        return todoItem.isComplete === true;\n      })\n    }\n    if(filter === -1){\n      return todoItems.filter((todoItem) => {\n        return todoItem.isComplete === false;\n      })\n    }\n    else{\n      return todoItems;\n    }\n\n  }\n\n  render() {\n    const { todoItem, filter } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"todos\">\n          <TodoHeader\n            // inputVal = { this.onCreatNewToDo }\n            addItem={this.onPushToDoList}\n          />\n          <TodoBody\n            data={this.onFilter(todoItem,filter)}\n            onUpdateStatus={this.onUpdateStatus}\n            removeItem={this.removeItem}\n          />\n          <TodoFooder \n            filter= {filter}\n            onFilterChange = { this.onFilterChange }\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}